🧪 Testing: ./gh-comment list 15 --author senior-dev* --status open --since 1 week ago
No comments found on PR #15
✅ SUCCESS: list example 1

🧪 Testing: ./gh-comment list 15 --type review --author *@company.com --since 2024-01-01
No comments found on PR #15
✅ SUCCESS: list example 2

🧪 Testing: ./gh-comment list 15 --author security-team* --since 2024-01-01 --type review
No comments found on PR #15
✅ SUCCESS: list example 3

🧪 Testing: ./gh-comment list 15 --author bot* --since 3 days ago --quiet
No comments found on PR #15
✅ SUCCESS: list example 4

🧪 Testing: ./gh-comment list 15 --format json | jq '.comments[].id'
3155060013
3155060087
3155060167
3155060238
3155060314
3155060389
3155060462
3155060551
3155060610
3155060672
✅ SUCCESS: list example 5

🧪 Testing: ./gh-comment list 15 --ids-only | xargs -I {} ./gh-comment resolve {}
Error: failed to find review thread for comment: thread not found for comment 3155060013
Usage:
  gh-comment resolve <comment-id> [flags]

Examples:
# Resolve a conversation
$ gh comment resolve 2246362251

# Resolve with dry-run preview
$ gh comment resolve --dry-run 2246362251

# Resolve multiple conversations (pipe from list)
$ gh comment list 123 --status open --ids-only | xargs -I {} gh comment resolve {}


Flags:
  -h, --help   help for resolve

Global Flags:
      --config string   Configuration file path (default: search standard locations)
      --dry-run         Show what would be commented without executing (default: false)
      --no-color        Disable colored output (default: false)
  -p, --pr int          PR number (default: auto-detect from branch)
  -R, --repo string     Repository in owner/repo format (default: auto-detect from current directory)
      --validate        Validate line exists in diff before commenting (default: true) (default true)
  -v, --verbose         Show detailed API interactions (default: false)

Error: failed to find review thread for comment: thread not found for comment 3155060013
Error: failed to find review thread for comment: thread not found for comment 3155060087
Usage:
  gh-comment resolve <comment-id> [flags]

Examples:
# Resolve a conversation
$ gh comment resolve 2246362251

# Resolve with dry-run preview
$ gh comment resolve --dry-run 2246362251

# Resolve multiple conversations (pipe from list)
$ gh comment list 123 --status open --ids-only | xargs -I {} gh comment resolve {}


Flags:
  -h, --help   help for resolve

Global Flags:
      --config string   Configuration file path (default: search standard locations)
      --dry-run         Show what would be commented without executing (default: false)
      --no-color        Disable colored output (default: false)
  -p, --pr int          PR number (default: auto-detect from branch)
  -R, --repo string     Repository in owner/repo format (default: auto-detect from current directory)
      --validate        Validate line exists in diff before commenting (default: true) (default true)
  -v, --verbose         Show detailed API interactions (default: false)

Error: failed to find review thread for comment: thread not found for comment 3155060087
Error: failed to find review thread for comment: thread not found for comment 3155060167
Usage:
  gh-comment resolve <comment-id> [flags]

Examples:
# Resolve a conversation
$ gh comment resolve 2246362251

# Resolve with dry-run preview
$ gh comment resolve --dry-run 2246362251

# Resolve multiple conversations (pipe from list)
$ gh comment list 123 --status open --ids-only | xargs -I {} gh comment resolve {}


Flags:
  -h, --help   help for resolve

Global Flags:
      --config string   Configuration file path (default: search standard locations)
      --dry-run         Show what would be commented without executing (default: false)
      --no-color        Disable colored output (default: false)
  -p, --pr int          PR number (default: auto-detect from branch)
  -R, --repo string     Repository in owner/repo format (default: auto-detect from current directory)
      --validate        Validate line exists in diff before commenting (default: true) (default true)
  -v, --verbose         Show detailed API interactions (default: false)

Error: failed to find review thread for comment: thread not found for comment 3155060167
Error: failed to find review thread for comment: thread not found for comment 3155060238
Usage:
  gh-comment resolve <comment-id> [flags]

Examples:
# Resolve a conversation
$ gh comment resolve 2246362251

# Resolve with dry-run preview
$ gh comment resolve --dry-run 2246362251

# Resolve multiple conversations (pipe from list)
$ gh comment list 123 --status open --ids-only | xargs -I {} gh comment resolve {}


Flags:
  -h, --help   help for resolve

Global Flags:
      --config string   Configuration file path (default: search standard locations)
      --dry-run         Show what would be commented without executing (default: false)
      --no-color        Disable colored output (default: false)
  -p, --pr int          PR number (default: auto-detect from branch)
  -R, --repo string     Repository in owner/repo format (default: auto-detect from current directory)
      --validate        Validate line exists in diff before commenting (default: true) (default true)
  -v, --verbose         Show detailed API interactions (default: false)

Error: failed to find review thread for comment: thread not found for comment 3155060238
Error: failed to find review thread for comment: thread not found for comment 3155060314
Usage:
  gh-comment resolve <comment-id> [flags]

Examples:
# Resolve a conversation
$ gh comment resolve 2246362251

# Resolve with dry-run preview
$ gh comment resolve --dry-run 2246362251

# Resolve multiple conversations (pipe from list)
$ gh comment list 123 --status open --ids-only | xargs -I {} gh comment resolve {}


Flags:
  -h, --help   help for resolve

Global Flags:
      --config string   Configuration file path (default: search standard locations)
      --dry-run         Show what would be commented without executing (default: false)
      --no-color        Disable colored output (default: false)
  -p, --pr int          PR number (default: auto-detect from branch)
  -R, --repo string     Repository in owner/repo format (default: auto-detect from current directory)
      --validate        Validate line exists in diff before commenting (default: true) (default true)
  -v, --verbose         Show detailed API interactions (default: false)

Error: failed to find review thread for comment: thread not found for comment 3155060314
Error: failed to find review thread for comment: thread not found for comment 3155060389
Usage:
  gh-comment resolve <comment-id> [flags]

Examples:
# Resolve a conversation
$ gh comment resolve 2246362251

# Resolve with dry-run preview
$ gh comment resolve --dry-run 2246362251

# Resolve multiple conversations (pipe from list)
$ gh comment list 123 --status open --ids-only | xargs -I {} gh comment resolve {}


Flags:
  -h, --help   help for resolve

Global Flags:
      --config string   Configuration file path (default: search standard locations)
      --dry-run         Show what would be commented without executing (default: false)
      --no-color        Disable colored output (default: false)
  -p, --pr int          PR number (default: auto-detect from branch)
  -R, --repo string     Repository in owner/repo format (default: auto-detect from current directory)
      --validate        Validate line exists in diff before commenting (default: true) (default true)
  -v, --verbose         Show detailed API interactions (default: false)

Error: failed to find review thread for comment: thread not found for comment 3155060389
Error: failed to find review thread for comment: thread not found for comment 3155060462
Usage:
  gh-comment resolve <comment-id> [flags]

Examples:
# Resolve a conversation
$ gh comment resolve 2246362251

# Resolve with dry-run preview
$ gh comment resolve --dry-run 2246362251

# Resolve multiple conversations (pipe from list)
$ gh comment list 123 --status open --ids-only | xargs -I {} gh comment resolve {}


Flags:
  -h, --help   help for resolve

Global Flags:
      --config string   Configuration file path (default: search standard locations)
      --dry-run         Show what would be commented without executing (default: false)
      --no-color        Disable colored output (default: false)
  -p, --pr int          PR number (default: auto-detect from branch)
  -R, --repo string     Repository in owner/repo format (default: auto-detect from current directory)
      --validate        Validate line exists in diff before commenting (default: true) (default true)
  -v, --verbose         Show detailed API interactions (default: false)

Error: failed to find review thread for comment: thread not found for comment 3155060462
Error: failed to find review thread for comment: thread not found for comment 3155060551
Usage:
  gh-comment resolve <comment-id> [flags]

Examples:
# Resolve a conversation
$ gh comment resolve 2246362251

# Resolve with dry-run preview
$ gh comment resolve --dry-run 2246362251

# Resolve multiple conversations (pipe from list)
$ gh comment list 123 --status open --ids-only | xargs -I {} gh comment resolve {}


Flags:
  -h, --help   help for resolve

Global Flags:
      --config string   Configuration file path (default: search standard locations)
      --dry-run         Show what would be commented without executing (default: false)
      --no-color        Disable colored output (default: false)
  -p, --pr int          PR number (default: auto-detect from branch)
  -R, --repo string     Repository in owner/repo format (default: auto-detect from current directory)
      --validate        Validate line exists in diff before commenting (default: true) (default true)
  -v, --verbose         Show detailed API interactions (default: false)

Error: failed to find review thread for comment: thread not found for comment 3155060551
Error: failed to find review thread for comment: thread not found for comment 3155060610
Usage:
  gh-comment resolve <comment-id> [flags]

Examples:
# Resolve a conversation
$ gh comment resolve 2246362251

# Resolve with dry-run preview
$ gh comment resolve --dry-run 2246362251

# Resolve multiple conversations (pipe from list)
$ gh comment list 123 --status open --ids-only | xargs -I {} gh comment resolve {}


Flags:
  -h, --help   help for resolve

Global Flags:
      --config string   Configuration file path (default: search standard locations)
      --dry-run         Show what would be commented without executing (default: false)
      --no-color        Disable colored output (default: false)
  -p, --pr int          PR number (default: auto-detect from branch)
  -R, --repo string     Repository in owner/repo format (default: auto-detect from current directory)
      --validate        Validate line exists in diff before commenting (default: true) (default true)
  -v, --verbose         Show detailed API interactions (default: false)

Error: failed to find review thread for comment: thread not found for comment 3155060610
Error: failed to find review thread for comment: thread not found for comment 3155060672
Usage:
  gh-comment resolve <comment-id> [flags]

Examples:
# Resolve a conversation
$ gh comment resolve 2246362251

# Resolve with dry-run preview
$ gh comment resolve --dry-run 2246362251

# Resolve multiple conversations (pipe from list)
$ gh comment list 123 --status open --ids-only | xargs -I {} gh comment resolve {}


Flags:
  -h, --help   help for resolve

Global Flags:
      --config string   Configuration file path (default: search standard locations)
      --dry-run         Show what would be commented without executing (default: false)
      --no-color        Disable colored output (default: false)
  -p, --pr int          PR number (default: auto-detect from branch)
  -R, --repo string     Repository in owner/repo format (default: auto-detect from current directory)
      --validate        Validate line exists in diff before commenting (default: true) (default true)
  -v, --verbose         Show detailed API interactions (default: false)

Error: failed to find review thread for comment: thread not found for comment 3155060672
❌ FAILED: list example 6

🧪 Testing: ./gh-comment list 15 --format json --author security* > security-comments.json
✅ SUCCESS: list example 7

🧪 Testing: ./gh-comment list 15 --status open --since 1 month ago --author lead*
No comments found on PR #15
✅ SUCCESS: list example 8

🧪 Testing: ./gh-comment list 15 --until 2024-12-31 --type issue --status resolved
No comments found on PR #15
✅ SUCCESS: list example 9

🧪 Testing: ./gh-comment list 15 --author qa* --since 3 days ago --type review
No comments found on PR #15
✅ SUCCESS: list example 10

🧪 Testing: ./gh-comment list 15 --author *@contractor.com --status open --since 1 month ago
No comments found on PR #15
✅ SUCCESS: list example 11

🧪 Testing: ./gh-comment list 15 --author architect* --status open --type review
No comments found on PR #15
✅ SUCCESS: list example 12

🧪 Testing: ./gh-comment list 15 --since critical-bug-report --author oncall* --status resolved
Error: invalid since date 'critical-bug-report': failed to parse "critical-bug-report": unknown format
Usage:
  gh-comment list [pr] [flags]

Examples:
# Review team analysis and metrics
$ gh comment list 123 --author "senior-dev*" --status open --since "1 week ago"
$ gh comment list 123 --type review --author "*@company.com" --since "2024-01-01"

# Security audit and compliance tracking
$ gh comment list 123 --author "security-team*" --since "2024-01-01" --type review
$ gh comment list 123 --author "bot*" --since "3 days ago" --quiet

# Structured output for automation
$ gh comment list 123 --format json | jq '.comments[].id'
$ gh comment list 123 --ids-only | xargs -I {} gh comment resolve {}
$ gh comment list 123 --format json --author "security*" > security-comments.json

# Code review workflow optimization
$ gh comment list 123 --status open --since "1 month ago" --author "lead*"
$ gh comment list 123 --until "2024-12-31" --type issue --status resolved

# Team communication patterns
$ gh comment list 123 --author "qa*" --since "3 days ago" --type review
$ gh comment list 123 --author "*@contractor.com" --status open --since "1 month ago"

# Blocker identification and resolution tracking
$ gh comment list 123 --author "architect*" --status open --type review
$ gh comment list 123 --since "critical-bug-report" --author "oncall*" --status resolved

# Performance review analysis
$ gh comment list 123 --author "performance-team" --since "load-test-date" --type review
$ gh comment list 123 --status open --author "*perf*" --since "1 week ago"

# Export for further analysis and automation
$ gh comment list 123 --author "all-reviewers*" --since "quarter-start" --quiet | process-review-data.sh
$ gh comment list 123 --ids-only --type review --status open | review-metrics.sh


Flags:
      --author string            Filter comments by author (supports wildcards: 'user*', '*@company.com') (default: all authors)
      --format string            Output format (default|json) (default: default) (default "default")
  -h, --help                     help for list
      --hide-authors             Hide author names for privacy (default: false)
      --ids-only                 Output only comment IDs (one per line) (default: false)
  -q, --quiet                    Minimal output without URLs and IDs (default: false, shows full context)
      --resolved                 Include resolved comments (legacy, use --status instead) (default: false)
      --resolved-status string   Filter by resolution status (pending|resolved|dismissed) (default: all)
      --since string             Show comments created after date (e.g., '2024-01-01', '1 week ago', '3 days ago') (default: all dates)
      --status string            Filter by comment status (open|resolved|all) (default: all) (default "all")
      --type string              Filter by comment type (issue|review|all) (default: all) (default "all")
      --unresolved               Show only unresolved comments (legacy, use --status instead) (default: false)
      --until string             Show comments created before date (e.g., '2024-12-31', '1 day ago') (default: all dates)

Global Flags:
      --config string   Configuration file path (default: search standard locations)
      --dry-run         Show what would be commented without executing (default: false)
      --no-color        Disable colored output (default: false)
  -p, --pr int          PR number (default: auto-detect from branch)
  -R, --repo string     Repository in owner/repo format (default: auto-detect from current directory)
      --validate        Validate line exists in diff before commenting (default: true) (default true)
  -v, --verbose         Show detailed API interactions (default: false)

Error: invalid since date 'critical-bug-report': failed to parse "critical-bug-report": unknown format
❌ FAILED: list example 13

🧪 Testing: ./gh-comment list 15 --author performance-team --since load-test-date --type review
Error: invalid since date 'load-test-date': failed to parse "load-test-date": unknown format
Usage:
  gh-comment list [pr] [flags]

Examples:
# Review team analysis and metrics
$ gh comment list 123 --author "senior-dev*" --status open --since "1 week ago"
$ gh comment list 123 --type review --author "*@company.com" --since "2024-01-01"

# Security audit and compliance tracking
$ gh comment list 123 --author "security-team*" --since "2024-01-01" --type review
$ gh comment list 123 --author "bot*" --since "3 days ago" --quiet

# Structured output for automation
$ gh comment list 123 --format json | jq '.comments[].id'
$ gh comment list 123 --ids-only | xargs -I {} gh comment resolve {}
$ gh comment list 123 --format json --author "security*" > security-comments.json

# Code review workflow optimization
$ gh comment list 123 --status open --since "1 month ago" --author "lead*"
$ gh comment list 123 --until "2024-12-31" --type issue --status resolved

# Team communication patterns
$ gh comment list 123 --author "qa*" --since "3 days ago" --type review
$ gh comment list 123 --author "*@contractor.com" --status open --since "1 month ago"

# Blocker identification and resolution tracking
$ gh comment list 123 --author "architect*" --status open --type review
$ gh comment list 123 --since "critical-bug-report" --author "oncall*" --status resolved

# Performance review analysis
$ gh comment list 123 --author "performance-team" --since "load-test-date" --type review
$ gh comment list 123 --status open --author "*perf*" --since "1 week ago"

# Export for further analysis and automation
$ gh comment list 123 --author "all-reviewers*" --since "quarter-start" --quiet | process-review-data.sh
$ gh comment list 123 --ids-only --type review --status open | review-metrics.sh


Flags:
      --author string            Filter comments by author (supports wildcards: 'user*', '*@company.com') (default: all authors)
      --format string            Output format (default|json) (default: default) (default "default")
  -h, --help                     help for list
      --hide-authors             Hide author names for privacy (default: false)
      --ids-only                 Output only comment IDs (one per line) (default: false)
  -q, --quiet                    Minimal output without URLs and IDs (default: false, shows full context)
      --resolved                 Include resolved comments (legacy, use --status instead) (default: false)
      --resolved-status string   Filter by resolution status (pending|resolved|dismissed) (default: all)
      --since string             Show comments created after date (e.g., '2024-01-01', '1 week ago', '3 days ago') (default: all dates)
      --status string            Filter by comment status (open|resolved|all) (default: all) (default "all")
      --type string              Filter by comment type (issue|review|all) (default: all) (default "all")
      --unresolved               Show only unresolved comments (legacy, use --status instead) (default: false)
      --until string             Show comments created before date (e.g., '2024-12-31', '1 day ago') (default: all dates)

Global Flags:
      --config string   Configuration file path (default: search standard locations)
      --dry-run         Show what would be commented without executing (default: false)
      --no-color        Disable colored output (default: false)
  -p, --pr int          PR number (default: auto-detect from branch)
  -R, --repo string     Repository in owner/repo format (default: auto-detect from current directory)
      --validate        Validate line exists in diff before commenting (default: true) (default true)
  -v, --verbose         Show detailed API interactions (default: false)

Error: invalid since date 'load-test-date': failed to parse "load-test-date": unknown format
❌ FAILED: list example 14

🧪 Testing: ./gh-comment list 15 --status open --author *perf* --since 1 week ago
No comments found on PR #15
✅ SUCCESS: list example 15

🧪 Testing: ./gh-comment list 15 --author all-reviewers* --since quarter-start --quiet | process-review-data.sh
/Users/silouan.wright/repos/gh-comment/logs/integration/test-cases-20250805-074140/list_examples.sh: line 186: process-review-data.sh: command not found
Error: invalid since date 'quarter-start': failed to parse "quarter-start": unknown format
Usage:
  gh-comment list [pr] [flags]

Examples:
# Review team analysis and metrics
$ gh comment list 123 --author "senior-dev*" --status open --since "1 week ago"
$ gh comment list 123 --type review --author "*@company.com" --since "2024-01-01"

# Security audit and compliance tracking
$ gh comment list 123 --author "security-team*" --since "2024-01-01" --type review
$ gh comment list 123 --author "bot*" --since "3 days ago" --quiet

# Structured output for automation
$ gh comment list 123 --format json | jq '.comments[].id'
$ gh comment list 123 --ids-only | xargs -I {} gh comment resolve {}
$ gh comment list 123 --format json --author "security*" > security-comments.json

# Code review workflow optimization
$ gh comment list 123 --status open --since "1 month ago" --author "lead*"
$ gh comment list 123 --until "2024-12-31" --type issue --status resolved

# Team communication patterns
$ gh comment list 123 --author "qa*" --since "3 days ago" --type review
$ gh comment list 123 --author "*@contractor.com" --status open --since "1 month ago"

# Blocker identification and resolution tracking
$ gh comment list 123 --author "architect*" --status open --type review
$ gh comment list 123 --since "critical-bug-report" --author "oncall*" --status resolved

# Performance review analysis
$ gh comment list 123 --author "performance-team" --since "load-test-date" --type review
$ gh comment list 123 --status open --author "*perf*" --since "1 week ago"

# Export for further analysis and automation
$ gh comment list 123 --author "all-reviewers*" --since "quarter-start" --quiet | process-review-data.sh
$ gh comment list 123 --ids-only --type review --status open | review-metrics.sh


Flags:
      --author string            Filter comments by author (supports wildcards: 'user*', '*@company.com') (default: all authors)
      --format string            Output format (default|json) (default: default) (default "default")
  -h, --help                     help for list
      --hide-authors             Hide author names for privacy (default: false)
      --ids-only                 Output only comment IDs (one per line) (default: false)
  -q, --quiet                    Minimal output without URLs and IDs (default: false, shows full context)
      --resolved                 Include resolved comments (legacy, use --status instead) (default: false)
      --resolved-status string   Filter by resolution status (pending|resolved|dismissed) (default: all)
      --since string             Show comments created after date (e.g., '2024-01-01', '1 week ago', '3 days ago') (default: all dates)
      --status string            Filter by comment status (open|resolved|all) (default: all) (default "all")
      --type string              Filter by comment type (issue|review|all) (default: all) (default "all")
      --unresolved               Show only unresolved comments (legacy, use --status instead) (default: false)
      --until string             Show comments created before date (e.g., '2024-12-31', '1 day ago') (default: all dates)

Global Flags:
      --config string   Configuration file path (default: search standard locations)
      --dry-run         Show what would be commented without executing (default: false)
      --no-color        Disable colored output (default: false)
  -p, --pr int          PR number (default: auto-detect from branch)
  -R, --repo string     Repository in owner/repo format (default: auto-detect from current directory)
      --validate        Validate line exists in diff before commenting (default: true) (default true)
  -v, --verbose         Show detailed API interactions (default: false)

Error: invalid since date 'quarter-start': failed to parse "quarter-start": unknown format
❌ FAILED: list example 16

🧪 Testing: ./gh-comment list 15 --ids-only --type review --status open | review-metrics.sh
/Users/silouan.wright/repos/gh-comment/logs/integration/test-cases-20250805-074140/list_examples.sh: line 198: review-metrics.sh: command not found
❌ FAILED: list example 17

