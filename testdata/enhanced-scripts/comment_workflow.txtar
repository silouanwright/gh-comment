# Test comprehensive comment workflow with mock GitHub API
[!mock-server] skip 'mock server not available'
[!scenario:basic] skip 'test scenario not available'

# Test listing comments - use dry run to avoid API calls
exec gh-comment list 123 --repo test-owner/test-repo --dry-run
stdout 'Comments on PR #123'
stdout 'This looks good to me!'
stdout 'Please fix the typo'
! stderr .

# Test adding a line-specific comment
exec gh-comment add 123 src/api.js 89 'This rate limiting logic needs improvement' --repo test-owner/test-repo --dry-run
stdout 'Would add comment to src/api.js:89'
stdout 'This rate limiting logic needs improvement'
! stderr .

# Test adding a line-specific comment (dry run only)
exec gh-comment add 123 src/test.js 1 'Great work on this PR!' --repo test-owner/test-repo --dry-run
stdout 'Would add comment to src/test.js:1'
! stderr .

# Verify list command works with filters (dry run)
exec gh-comment list 123 --repo test-owner/test-repo --dry-run
stdout 'Comments on PR #123'
stdout 'This looks good to me!'
! stderr .

# Test filtering by author (dry run)
exec gh-comment list 123 --author test-user --repo test-owner/test-repo --dry-run
stdout 'Comments on PR #123'
stdout 'This looks good to me!'
! stderr .

# Test filtering by author with wildcard (dry run)
exec gh-comment list 123 --author 'test*' --repo test-owner/test-repo --dry-run
stdout 'Comments on PR #123'
stdout 'This looks good to me!'
! stderr .