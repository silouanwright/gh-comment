name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.23', '1.24']
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Check coverage threshold
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Coverage $COVERAGE% is below threshold 80%"
            exit 1
          fi

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  # integration:
  #   name: Integration Tests
  #   runs-on: ubuntu-latest
  #   needs: [lint, test]
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: '1.24'
  #
  #     - name: Build binary
  #       run: go build -o gh-comment
  #
  #     - name: Run integration tests
  #       run: go test -v -tags=integration ./...
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build for multiple platforms
        run: |
          GOOS=linux GOARCH=amd64 go build -o dist/gh-comment-linux-amd64
          GOOS=darwin GOARCH=amd64 go build -o dist/gh-comment-darwin-amd64
          GOOS=darwin GOARCH=arm64 go build -o dist/gh-comment-darwin-arm64
          GOOS=windows GOARCH=amd64 go build -o dist/gh-comment-windows-amd64.exe

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: dist/

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run benchmarks on PR
        run: |
          go test -bench=. -benchmem -run=^$ -count=10 ./... > pr-benchmark.txt

      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}

      - name: Run benchmarks on base
        run: |
          go test -bench=. -benchmem -run=^$ -count=10 ./... > base-benchmark.txt

      - name: Install benchstat
        run: go install golang.org/x/perf/cmd/benchstat@latest

      - name: Compare benchmarks
        run: |
          benchstat base-benchmark.txt pr-benchmark.txt > comparison.txt
          cat comparison.txt

      - name: Check for performance regression
        run: |
          # Parse benchstat output to check for significant regressions
          # Look for changes > 10% marked with "~" or changes > 20%
          if grep -E "\\+[2-9][0-9]\\.[0-9]+%|\\+[1-9][0-9]{2,}\\.[0-9]+%" comparison.txt; then
            echo "Performance regression detected!"
            echo "::warning::Significant performance regression detected. Please review the benchmark comparison."
          fi

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const comparison = fs.readFileSync('comparison.txt', 'utf8');

            const comment = `## ðŸ“Š Benchmark Results\n\n<details>\n<summary>Performance comparison</summary>\n\n\`\`\`\n${comparison}\n\`\`\`\n</details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            pr-benchmark.txt
            base-benchmark.txt
            comparison.txt
